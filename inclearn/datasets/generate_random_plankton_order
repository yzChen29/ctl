import numpy as np
import random
from collections import OrderedDict

random.seed(0)

def categorical_cross_entropy(y_true, y_pred):
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)  # 限制y_pred的范围在(epsilon, 1-epsilon)之间
    return - np.sum(y_true * np.log(y_pred))

def show_ori_class_index(class_name, num_dict):
    name_list = list(num_dict.keys())
    if class_name in name_list[0:7]:
        return 1
    elif class_name in name_list[7:13]:
        return 2
    elif class_name in name_list[13:22]:
        return 3
    elif class_name in name_list[22:25]:
        return 4
    else:
        return 5


num_dict = OrderedDict({'Dinophysis': 504, 'Cochlodinium': 1493, 'Gyrodinium': 671, 'Polykrikos': 701, 'Torodinium': 261, 'Prorocentrum_gracile': 390, 'Prorocentrum_micans': 3147,

            'Ceratium_falcatiforme': 1568, 'Ceratium_furca': 2519, 'Ceratium_Other': 508, 'Lingulodinium_polyedrum': 1433, 'Protoperidinium': 691, 'Unknown_dinoflagellates_elongated': 302,

            'Pseudo_nitzschia': 618, 'Chaetoceros_socialis': 505, 'Eucampia': 525, 'Thalassionema_or_Thalassiothrix': 689, 'diatom_chain': 830, 'pennate_diatom': 485, 'Kelp_Fragment': 3011, 'Chatonella': 558, 'Heterosigma': 777,

            'Acantharea': 776, 'Ciliates': 3120, 'Nauplii': 854,

            'Sand': 7217, 'Aggregate': 294, 'Bubble': 359, 'Bad_segmentation': 995

            })
num_pair_list = [(i, num_dict[i]) for i in num_dict]

total_num = 35801
y_true = np.array([7167, 7021, 7998, 4750, 8865])/total_num

store_list = [] # (num, ce, name)
for i in range(10000):
    random.shuffle(num_pair_list)

    y_pred = np.array([np.sum([j[1] for j in num_pair_list[0:7]]), np.sum([j[1] for j in num_pair_list[7:13]]), np.sum([j[1] for j in num_pair_list[13:22]]), np.sum([j[1] for j in num_pair_list[22:25]]), np.sum([j[1] for j in num_pair_list[25:29]])])  # 模型预测输出（经过softmax处理）
    y_pred_norm = y_pred/total_num
    cross_entropy = categorical_cross_entropy(y_true, y_pred_norm)

    if len(store_list)<10:
        store_list.append((y_pred, cross_entropy, [[[j[0] for j in num_pair_list[0:7]], [j[0] for j in num_pair_list[7:13]], [j[0] for j in num_pair_list[13:22]], [j[0] for j in num_pair_list[22:25]], [j[0] for j in num_pair_list[25:29]]]]))
    else:
        if cross_entropy<store_list[-1][1]:
            store_list.pop(-1)
            store_list.append((y_pred, cross_entropy, [
                [(j[0], show_ori_class_index(j[0], num_dict)) for j in num_pair_list[0:7]], [(j[0], show_ori_class_index(j[0], num_dict)) for j in num_pair_list[7:13]],
                 [(j[0], show_ori_class_index(j[0], num_dict)) for j in num_pair_list[13:22]], [(j[0], show_ori_class_index(j[0], num_dict)) for j in num_pair_list[22:25]],
                 [(j[0], show_ori_class_index(j[0], num_dict)) for j in num_pair_list[25:29]]]))
        store_list.sort(key=lambda x:x[1])




print(store_list[0])



print()



